/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from 'firebaseui';


interface FirebaseSignInFormProps {
  
  /** Whether to automatically upgrade existing anonymous users on sign-in/sign-up. See Upgrading anonymous users. */
  autoUpgradeAnonymousUsers?: Components.FirebaseSignInForm["autoUpgradeAnonymousUsers"]
  
  /** The URL of the Terms of Service page. */
  tosUrl?: Components.FirebaseSignInForm["tosUrl"]
  
  /** The URL of the Privacy Policy page. */
  privacyPolicyUrl?: Components.FirebaseSignInForm["privacyPolicyUrl"]
  
  /**  */
  signInSuccessUrl?: Components.FirebaseSignInForm["signInSuccessUrl"]
  
  /**  */
  assetBasePath?: Components.FirebaseSignInForm["assetBasePath"]
}

interface FirebaseSignInFormEvents {
  
  /**  */
  signInSuccessful: Parameters<JSX.FirebaseSignInForm["onSignInSuccessful"]>[0]
}

interface FirebaseSignInFormSlots {
  default: any
}
  
/* generated by Svelte v3.34.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let firebase_sign_in_form;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			firebase_sign_in_form = element("firebase-sign-in-form");
			if (default_slot) default_slot.c();
			set_custom_element_data(firebase_sign_in_form, "auto-upgrade-anonymous-users", /*autoUpgradeAnonymousUsers*/ ctx[0]);
			set_custom_element_data(firebase_sign_in_form, "tos-url", /*tosUrl*/ ctx[1]);
			set_custom_element_data(firebase_sign_in_form, "privacy-policy-url", /*privacyPolicyUrl*/ ctx[2]);
			set_custom_element_data(firebase_sign_in_form, "sign-in-success-url", /*signInSuccessUrl*/ ctx[3]);
			set_custom_element_data(firebase_sign_in_form, "asset-base-path", /*assetBasePath*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, firebase_sign_in_form, anchor);

			if (default_slot) {
				default_slot.m(firebase_sign_in_form, null);
			}

			/*firebase_sign_in_form_binding*/ ctx[11](firebase_sign_in_form);
			current = true;

			if (!mounted) {
				dispose = listen(firebase_sign_in_form, "signInSuccessful", /*onEvent*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 512) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[9], dirty, null, null);
				}
			}

			if (!current || dirty & /*autoUpgradeAnonymousUsers*/ 1) {
				set_custom_element_data(firebase_sign_in_form, "auto-upgrade-anonymous-users", /*autoUpgradeAnonymousUsers*/ ctx[0]);
			}

			if (!current || dirty & /*tosUrl*/ 2) {
				set_custom_element_data(firebase_sign_in_form, "tos-url", /*tosUrl*/ ctx[1]);
			}

			if (!current || dirty & /*privacyPolicyUrl*/ 4) {
				set_custom_element_data(firebase_sign_in_form, "privacy-policy-url", /*privacyPolicyUrl*/ ctx[2]);
			}

			if (!current || dirty & /*signInSuccessUrl*/ 8) {
				set_custom_element_data(firebase_sign_in_form, "sign-in-success-url", /*signInSuccessUrl*/ ctx[3]);
			}

			if (!current || dirty & /*assetBasePath*/ 16) {
				set_custom_element_data(firebase_sign_in_form, "asset-base-path", /*assetBasePath*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(firebase_sign_in_form);
			if (default_slot) default_slot.d(detaching);
			/*firebase_sign_in_form_binding*/ ctx[11](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { autoUpgradeAnonymousUsers = undefined } = $$props;
	let { tosUrl = undefined } = $$props;
	let { privacyPolicyUrl = undefined } = $$props;
	let { signInSuccessUrl = undefined } = $$props;
	let { assetBasePath = undefined } = $$props;
	const setAuth = (...args) => __ref.setAuth(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(5, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function firebase_sign_in_form_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(5, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ("autoUpgradeAnonymousUsers" in $$props) $$invalidate(0, autoUpgradeAnonymousUsers = $$props.autoUpgradeAnonymousUsers);
		if ("tosUrl" in $$props) $$invalidate(1, tosUrl = $$props.tosUrl);
		if ("privacyPolicyUrl" in $$props) $$invalidate(2, privacyPolicyUrl = $$props.privacyPolicyUrl);
		if ("signInSuccessUrl" in $$props) $$invalidate(3, signInSuccessUrl = $$props.signInSuccessUrl);
		if ("assetBasePath" in $$props) $$invalidate(4, assetBasePath = $$props.assetBasePath);
		if ("$$scope" in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		autoUpgradeAnonymousUsers,
		tosUrl,
		privacyPolicyUrl,
		signInSuccessUrl,
		assetBasePath,
		__ref,
		onEvent,
		setAuth,
		getWebComponent,
		$$scope,
		slots,
		firebase_sign_in_form_binding
	];
}

class FirebaseSignInForm extends SvelteComponent {
  $$prop_def: FirebaseSignInFormProps;
  $$events_def: FirebaseSignInFormEvents;
  $$slot_def: FirebaseSignInFormSlots;

  $on<K extends keyof FirebaseSignInFormEvents>(type: K, callback: (e: FirebaseSignInFormEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<FirebaseSignInFormProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			autoUpgradeAnonymousUsers: 0,
			tosUrl: 1,
			privacyPolicyUrl: 2,
			signInSuccessUrl: 3,
			assetBasePath: 4,
			setAuth: 7,
			getWebComponent: 8
		});
	}

	
  /**  */
 get setAuth(): Components.FirebaseSignInForm["setAuth"] {
		return this.$$.ctx[7];
	}

	get getWebComponent(): HTMLFirebaseSignInFormElement | undefined {
		return this.$$.ctx[8];
	}
}

export default FirebaseSignInForm;